{
  "name": "Reakt Vert.x Bridge",
  "tagline": "Added Promises and simplified streaming to Vert.x using Reakt",
  "body": "# Reakt Vertx\r\nAdded Promises and simplified streaming to Vert.x\r\n\r\n```java\r\n        final Promise<Employee> promise = Promises.<Employee>promise();\r\n        promise.thenExpect(this::handleResult).catchError(this::handleError);\r\n        /** Convert the Reakt promise to a Vert.x asyncResultHandler */\r\n        final Handler<AsyncResult<Employee>> asyncResultHandler = ReaktVertx.convertPromise(promise);\r\n```\r\n\r\n\r\nYou can also use replay promises, all promises, any promises, and other\r\nfeatures of [Reakt](http://advantageous.github.io/reakt) to simplify async, reactive Vertx/Java development.\r\n\r\n[Reakt](http://advantageous.github.io/reakt) gets used by [QBit](http://advantageous.github.io/qbit/), and Conekt.\r\n\r\n#### Related projects\r\n* [QBit Reactive Microservices](http://advantageous.github.io/qbit/)\r\n* [Reakt Reactive Java](http://advantageous.github.io/reakt)\r\n* [Reakt Guava Bridge](http://advantageous.github.io/reakt-guava/)\r\n* [QBit Extensions](https://github.com/advantageous/qbit-extensions)\r\n* [Elekt Consul](http://advantageous.github.io/elekt-consul/)\r\n* [Elekt](http://advantageous.github.io/elekt/)\r\n* [Reactive Microservices](http://www.mammatustech.com/reactive-microservices)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}